package com.example.demo.mybatis;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import com.example.demo.model.User;
import com.example.demo.mybatis.mapper.UserMapper;
import com.example.demo.mybatis.mapper.UserMapperAnnotation;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.jupiter.api.Test;

public class MybatisTest {

    public SqlSessionFactory getSqlSessionFactory() throws IOException {
        String resource = "com/example/demo/mybatis/mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        return new SqlSessionFactoryBuilder().build(inputStream);
    }

    @Test
    public void testSelectUser() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession();
            User user = session.selectOne("getUserById", 5);
            System.out.println(user);
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (session != null)
                session.close();
        }
    }

    @Test
    public void testMapperInterface() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession();
            UserMapper mapper = session.getMapper(UserMapper.class);
            User user = mapper.getUserById(4);
            System.out.println(user);
            // a proxy class generated by mybatis
            System.out.println(mapper.getClass());
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (session != null)
                session.close();
        }
    }

    @Test
    public void testMapperInterfaceAnnotation() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession();
            UserMapperAnnotation mapper = session.getMapper(UserMapperAnnotation.class);
            User user = mapper.getUserById(7);
            System.out.println(user);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }

    @Test
    public void testInsertUser() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession(true);
            UserMapper mapper = session.getMapper(UserMapper.class);
            User user = new User("Fin", "abcdef", 1000);
            int count = mapper.insert(user);
            System.out.println(count);
            System.out.println(user);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (session != null)
                session.close();
        }
    }

    @Test
    public void testUpdateUser() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession(true);
            UserMapper mapper = session.getMapper(UserMapper.class);
            User user = new User("Fin", "abcdef", 2000, 13);
            int count = mapper.update(user);
            System.out.println(count);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (session != null)
                session.close();
        }
    }

    @Test
    public void testDeleteUser() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession(true);
            UserMapper mapper = session.getMapper(UserMapper.class);
            int count = mapper.deleteById(13);
            System.out.println(count);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (session != null)
                session.close();
        }
    }

    @Test
    public void testParamsMap() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession(true);
            UserMapper mapper = session.getMapper(UserMapper.class);
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("id", 8);
            map.put("password", "abcdef");
            User user = mapper.getUserByIdAndPasswordMap(map);
            System.out.println(user);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (session != null)
                session.close();
        }
    }

    @Test
    public void testReturnMap() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession(true);
            UserMapper mapper = session.getMapper(UserMapper.class);
            Map<String, Object> map = mapper.getUserByIdReturnMap(8);
            System.out.println(map);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (session != null)
                session.close();
        }
    }

    @Test
    public void testSelectAllReturnMap() {
        SqlSession session = null;
        try {
            SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();
            session = sqlSessionFactory.openSession(true);
            UserMapper mapper = session.getMapper(UserMapper.class);
            Map<Integer, User> map = mapper.getAllReturnMap();
            System.out.println(map);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (session != null)
                session.close();
        }
    }
}